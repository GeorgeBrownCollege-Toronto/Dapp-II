// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OwnershipTransferred entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnershipTransferred entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnershipTransferred", id.toString(), this);
  }

  static load(id: string): OwnershipTransferred | null {
    return store.get("OwnershipTransferred", id) as OwnershipTransferred | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class SurveyCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SurveyCreated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SurveyCreated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SurveyCreated", id.toString(), this);
  }

  static load(id: string): SurveyCreated | null {
    return store.get("SurveyCreated", id) as SurveyCreated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get surveyId(): BigInt {
    let value = this.get("surveyId");
    return value.toBigInt();
  }

  set surveyId(value: BigInt) {
    this.set("surveyId", Value.fromBigInt(value));
  }

  get surveyAddress(): Bytes {
    let value = this.get("surveyAddress");
    return value.toBytes();
  }

  set surveyAddress(value: Bytes) {
    this.set("surveyAddress", Value.fromBytes(value));
  }

  get createdAtTimeStamp(): BigInt {
    let value = this.get("createdAtTimeStamp");
    return value.toBigInt();
  }

  set createdAtTimeStamp(value: BigInt) {
    this.set("createdAtTimeStamp", Value.fromBigInt(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }
}

export class SurveyFactoryInitialized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SurveyFactoryInitialized entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SurveyFactoryInitialized entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SurveyFactoryInitialized", id.toString(), this);
  }

  static load(id: string): SurveyFactoryInitialized | null {
    return store.get(
      "SurveyFactoryInitialized",
      id
    ) as SurveyFactoryInitialized | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get surveyCreationFees(): BigInt {
    let value = this.get("surveyCreationFees");
    return value.toBigInt();
  }

  set surveyCreationFees(value: BigInt) {
    this.set("surveyCreationFees", Value.fromBigInt(value));
  }
}
