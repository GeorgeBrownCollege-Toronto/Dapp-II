{"version":3,"sources":["drizzleOptions.js","MyComponent.js","App.js","serviceWorker.js","index.js"],"names":["options","web3","block","customProvider","Web3","window","currentProvider","polls","accounts","contracts","SurveyFactory","events","ContractData","newContextComponents","drizzle","drizzleState","React","useState","surveys","setSurveys","currentAccount","setCurrentAccount","useEffect","a","methods","getAllSurveys","call","surveyArr","slice","reverse","className","htmlFor","name","id","value","onChange","event","target","Object","keys","map","x","index","key","contract","method","onClick","createSurvey","send","from","gasLimit","then","unshift","SurveyCreated","returnValues","catch","error","toast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","surveyAddr","methodArgs","Drizzle","drizzleOptions","App","Provider","Consumer","drizzleContext","initialized","MyComponent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"2t3GAmBeA,EAhBC,CACdC,KAAM,CACJC,OAAO,EAEPC,eAAgB,IAAIC,IAAKC,OAAOJ,KAAKK,kBAGvCC,MAAO,CACLC,SAAU,KAEZC,UAAW,CAACC,GACZC,OAAQ,CACND,cAAe,CAAC,2BAA4B,mB,mCCZxCE,E,OAAiBC,qBAAjBD,aAEO,cAAgC,IAA7BE,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAAmB,EACdC,IAAMC,SAAS,IADD,mBACrCC,EADqC,KAC5BC,EAD4B,OAEAH,IAAMC,SAChDF,EAAaP,SAAS,IAHoB,mBAErCY,EAFqC,KAErBC,EAFqB,KA4C5C,OAbAL,IAAMM,WAAU,WAAM,4CACpB,4BAAAC,EAAA,sEAC0BT,EAAQL,UAAUC,cAAcc,QACrDC,gBACAC,OAHL,OACQC,EADR,OAMER,EAAWQ,EAAUC,QAAQC,WAN/B,4CADoB,uBAAC,WAAD,wBASpBJ,MAKA,yBAAKK,UAAU,OACb,6BACE,mDAGF,yBAAKA,UAAU,WACb,2BAAOC,QAAQ,kBAAf,sBACA,4BACEC,KAAK,WACLC,GAAG,iBACHC,MAAOd,EACPe,SA7Be,SAACC,GACtBf,EAAkBe,EAAMC,OAAOH,SA8BxBI,OAAOC,KAAKxB,EAAaP,UAAUgC,KAAI,SAACC,EAAGC,GAAJ,OACtC,4BAAQC,IAAKF,EAAGP,MAAOnB,EAAaP,SAASkC,IAC1C3B,EAAaP,SAASkC,SAY/B,yBAAKZ,UAAU,aACb,6BACE,wDACA,6BACE,kBAAClB,EAAD,CACEE,QAASA,EACTC,aAAcA,EACd6B,SAAS,gBACTC,OAAO,uBACN,IANL,OASA,4BAAQC,QA9EW,WACdhC,EAAQL,UAAUC,cAAcc,QAAQuB,eAAeC,KAAK,CACrEd,MAAO,IACPe,KAAM7B,EACN8B,SAAU,OAETC,MAAK,YAAiB,IAAdxC,EAAa,EAAbA,OACTO,EAAQkC,QAAQzC,EAAO0C,cAAcC,aAArB,qBACfC,OAAM,SAACC,GACRC,IAAMD,MAAMA,EAAME,QAAS,CACzBC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,SA8DR,iBAEF,6BACE,6DACA,+BACE,+BACE,4BACE,qCACA,gDAGJ,+BACGhD,EAAQsB,KAAI,SAAC2B,EAAYzB,GAAb,OACX,wBAAIC,IAAKwB,GACP,4BACE,kBAACvD,EAAD,CACEE,QAASA,EACTC,aAAcA,EACd6B,SAAS,gBACTC,OAAO,gBACPuB,WAAY,CAAC,GAAD,OAAI1B,OAGpB,4BAAKyB,aCvGjBrD,G,cAAU,IAAIuD,UAAQC,IAuBbC,EArBH,WACV,OACE,kBAAC,iBAAeC,SAAhB,CAAyB1D,QAASA,GAChC,kBAAC,iBAAe2D,SAAhB,MACG,SAAAC,GAAmB,IACV5D,EAAuC4D,EAAvC5D,QAASC,EAA8B2D,EAA9B3D,aAEjB,OAF+C2D,EAAhBC,YAO7B,kBAACC,EAAD,CAAa9D,QAASA,EAASC,aAAcA,IAJtC,gBAQb,kBAAC,IAAD,QCfc8D,QACW,cAA7BxE,OAAOyE,SAASC,UAEe,UAA7B1E,OAAOyE,SAASC,UAEhB1E,OAAOyE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLmC,QAAQnC,MAAMA,EAAME,c","file":"static/js/main.b6609e47.chunk.js","sourcesContent":["import Web3 from \"web3\";\nimport SurveyFactory from \"./contracts/SurveyFactory.json\";\n\nconst options = {\n  web3: {\n    block: false,\n    // customProvider: new Web3(\"ws://localhost:8545\"),\n    customProvider: new Web3(window.web3.currentProvider),\n  },\n  // syncAlways:true,\n  polls: {\n    accounts: 2000,\n  },\n  contracts: [SurveyFactory],\n  events: {\n    SurveyFactory: [\"SurveyFactoryInitialized\", \"SurveyCreated\"],\n  },\n};\n\nexport default options;\n","import React from \"react\";\nimport { newContextComponents } from \"@drizzle/react-components\";\nimport { toast } from \"react-toastify\";\nconst { ContractData } = newContextComponents;\n\nexport default ({ drizzle, drizzleState }) => {\n  const [surveys, setSurveys] = React.useState([]);\n  const [currentAccount, setCurrentAccount] = React.useState(\n    drizzleState.accounts[0]\n  );\n\n  const handleCreateSurvey = () => {\n    const tx = drizzle.contracts.SurveyFactory.methods.createSurvey().send({\n      value: \"4\",\n      from: currentAccount,\n      gasLimit: 2100000,\n    });\n    tx.then(({ events }) => {\n      surveys.unshift(events.SurveyCreated.returnValues[\"newSurveyAddress\"]);\n    }).catch((error) => {\n      toast.error(error.message, {\n        position: \"top-center\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    });\n  };\n\n  const handleOnChange = (event) => {\n    setCurrentAccount(event.target.value);\n  };\n\n  React.useEffect(() => {\n    async function getAllSurveys() {\n      const surveyArr = await drizzle.contracts.SurveyFactory.methods\n        .getAllSurveys()\n        .call();\n      // Because the array is frozen in strict mode, you'll need to copy the array before sorting it:\n      // https://stackoverflow.com/a/53420326\n      setSurveys(surveyArr.slice().reverse());\n    }\n    getAllSurveys();\n  });\n\n  // destructure drizzle and drizzleState from props\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Survey Marketplace</h1>\n      </div>\n\n      <div className=\"section\">\n        <label htmlFor=\"account-select\">Choose an account:</label>\n        <select\n          name=\"accounts\"\n          id=\"account-select\"\n          value={currentAccount}\n          onChange={handleOnChange}\n        >\n          {Object.keys(drizzleState.accounts).map((x, index) => (\n            <option key={x} value={drizzleState.accounts[index]}>\n              {drizzleState.accounts[index]}\n              {/* (\n              {drizzle.web3.utils.fromWei(\n                drizzleState.accountBalances[drizzleState.accounts[index]],\n                \"ether\"\n              )}{\" \"}\n              ether) */}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"container\">\n        <div>\n          <div>Survey creation fees : </div>\n          <div>\n            <ContractData\n              drizzle={drizzle}\n              drizzleState={drizzleState}\n              contract=\"SurveyFactory\"\n              method=\"surveyCreationFees\"\n            />{\" \"}\n            wei\n          </div>\n          <button onClick={handleCreateSurvey}>CreateSurvey</button>\n        </div>\n        <div>\n          <strong>Survey listings to owner </strong>\n          <table>\n            <thead>\n              <tr>\n                <th>Owner</th>\n                <th>Survey Address</th>\n              </tr>\n            </thead>\n            <tbody>\n              {surveys.map((surveyAddr, index) => (\n                <tr key={surveyAddr}>\n                  <td>\n                    <ContractData\n                      drizzle={drizzle}\n                      drizzleState={drizzleState}\n                      contract=\"SurveyFactory\"\n                      method=\"surveyToOwner\"\n                      methodArgs={[`${index}`]}\n                    />\n                  </td>\n                  <td>{surveyAddr}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { DrizzleContext } from \"@drizzle/react-plugin\";\nimport { Drizzle } from \"@drizzle/store\";\nimport { ToastContainer } from 'react-toastify';\nimport drizzleOptions from \"./drizzleOptions\";\nimport MyComponent from \"./MyComponent\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\n\nconst drizzle = new Drizzle(drizzleOptions);\n\nconst App = () => {\n  return (\n    <DrizzleContext.Provider drizzle={drizzle}>\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n\n          if (!initialized) {\n            return \"Loading...\"\n          }\n\n          return (\n            <MyComponent drizzle={drizzle} drizzleState={drizzleState} />\n          )\n        }}\n      </DrizzleContext.Consumer>\n      <ToastContainer />\n    </DrizzleContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}